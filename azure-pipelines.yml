# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - master
      - develop
      - release/*
      - feature/*
      - hotfix/*
  paths:
    include:
      - api/*
      - app/*
      - core/*
      - integration/*
      - pom.xml

resources:
  - repo: self

variables:

  dockerfileRelativePath: 'Dockerfile'

  # Agent VM image name for Build

  vmImageNameDefault: 'ubuntu-latest'

  # Image Repository Name
  imageRepository: 'rtdmspaymentinstrumentmanager'


  isToDeploy: $[and(ne(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))]
  isSIT: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/st')]
  isUAT: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/uat')]
  isPROD: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release/st') }}:
    dockerRegistryServiceConnection: 'cstarregistry-connection'
    containerRegistry: 'cstarregistry.azurecr.io'
    deployment: deployment-sit
    imagePullSecret: 'cstarregistry-auth'
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release/uat') }}:
    dockerRegistryServiceConnection: 'cstaruatregistry-connection'
    containerRegistry: 'cstaruatregistry.azurecr.io'
    deployment: deployment-uat
    imagePullSecret: 'cstaruatregistry-auth'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    dockerRegistryServiceConnection: 'cstarprodregistry-connection'
    containerRegistry: 'cstarprodregistry.azurecr.io'
    deployment: deployment-prod
    imagePullSecret: 'cstarprodregistry-auth'
  ${{ if and(not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release')), ne(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
    dockerRegistryServiceConnection: 'cstarregistry-connection'

stages:
  - stage: Test
    displayName: Test
    condition: or(eq(variables.isPullRequest, true), and(ne(variables.isSIT, true), ne(variables.isUAT, true), ne(variables.isPROD, true)))
    jobs:
      - job: Test
        displayName: Test
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings.xml'
              retryCount: '2'
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -s $(settingsxml.secureFilePath)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false

  - stage: POM
    displayName: POM
    condition: eq(variables.isToDeploy, true)
    jobs:
      - job: POM
        displayName: POM
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings.xml'
              retryCount: '2'
          - task: Bash@3
            displayName: Get POM version
            name: getpomversion
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat pom.xml | grep '^.*<version>' | sed -n 2p | awk -F'[><]' '{print $3}')
                echo "##vso[task.setvariable variable=outputpomversion;isOutput=true]$version"
              failOnStderr: true

  - stage: SIT
    displayName: SIT
    dependsOn: POM
    condition: and(eq(variables.isToDeploy, true), eq(variables.isSIT, true))
    variables:
      pomversion: $[ stageDependencies.POM.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings.xml'
              retryCount: '2'
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'package'
              options: '-B -s $(settingsxml.secureFilePath) -DskipTests=false'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false
          - task: Docker@2
            displayName: Build and push an image to container registry
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'

      - deployment: Deploy
        displayName: Deploy
        dependsOn: Build
        condition: and(succeeded(), eq(variables.isToDeploy, true), eq(variables.isSIT, true))
        pool:
          vmImage: $(vmImageNameDefault)
        environment: 'sit.rtd-test'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/$(deployment).yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(pomversion)


  - stage: UAT
    displayName: UAT
    dependsOn: POM
    condition: and(eq(variables.isToDeploy, true), eq(variables.isUAT, true))
    variables:
      pomversion: $[ stageDependencies.POM.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:

          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings.xml'
              retryCount: '2'
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'package'
              options: '-B -s $(settingsxml.secureFilePath) -DskipTests=false'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false
          - task: Docker@2
            displayName: Build and push an image to container registry
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'


      - deployment: Deploy
        displayName: Deploy
        dependsOn: Build
        pool:
          name: uat_agent_pool
        environment: 'uat'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: 'ddsakstest-self-connection-rtd-uat'
                    namespace: 'rtd-uat'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/$(deployment).yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    containers: '$(containerRegistry)/$(imageRepository):$(pomversion)'
                    imagePullSecrets: '$(imagePullSecret)'


  - stage: PROD
    displayName: PROD
    dependsOn: POM
    condition: and(eq(variables.isToDeploy, true), eq(variables.isPROD, true))
    variables:
      pomversion: $[ stageDependencies.POM.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: DownloadSecureFile@1
            displayName: 'download settings.xml for Maven'
            name: settingsxml
            inputs:
              secureFile: 'settings.xml'
              retryCount: '2'
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'deploy'
              options: '-B -s $(settingsxml.secureFilePath) -DskipTests=false'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m'
              mavenAuthenticateFeed: false
              effectivePomSkip: true
              sonarQubeRunAnalysis: false
          - task: Docker@2
            displayName: Build and push an image to container registry
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Atrifact manifests'
            condition: and(succeeded(), eq(variables.isToDeploy, true))
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/manifests'
              artifact: 'manifests'
              publishLocation: 'pipeline'

      - deployment: Deploy
        displayName: Deploy
        dependsOn: Build
        pool:
          name: prod-agent-pool
        environment: 'prod'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifests'
                    targetPath: '$(Pipeline.Workspace)/manifests'
                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: 'u87aksprod-rtd-self-connection'
                    namespace: 'rtd'
                    manifests: |
                      $(Pipeline.Workspace)/manifests/$(deployment).yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    containers: '$(containerRegistry)/$(imageRepository):$(pomversion)'
                    imagePullSecrets: '$(imagePullSecret)'